name: Elite Trading Bot v7.0 - Signal Generator

on:
  schedule:
    # Runs every hour at minute 0
    - cron: '0 * * * *'
  
  # Allows manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: boolean
      check_news:
        description: 'Enable news monitoring'
        required: false
        default: 'true'
        type: boolean

# Ensure workflow has necessary permissions
permissions:
  contents: read
  actions: read

jobs:
  run-trading-bot:
    runs-on: ubuntu-latest
    
    # Prevent workflow from being disabled
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Create requirements.txt if not exists
        run: |
          if [ ! -f requirements.txt ]; then
            cat > requirements.txt << EOF
          pandas>=2.0.0
          numpy>=1.24.0
          requests>=2.31.0
          python-dateutil>=2.8.2
          pytz>=2023.3
          websockets>=12.0
          EOF
            echo "✅ Created requirements.txt"
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo ""
          echo "✅ Installed packages:"
          pip list | grep -E "pandas|numpy|requests|pytz|websockets"
      
      - name: Display bot configuration
        run: |
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║      🚀 Elite Trading Bot v7.0 - WEBSOCKET SIGNAL GENERATOR     ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Trigger: ${{ github.event_name }}"
          echo "Configuration:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Python Version:    $(python --version)"
          echo "  Mode:              Signal Generation Only"
          echo "  Connection:        WebSocket (Deriv API)"
          echo "  Symbols:           XAUUSD (Gold), BTCUSD (Bitcoin)"
          echo "  Strategy:          Multi-Indicator Confluence v7.0"
          echo "  Timeframe:         1 Hour"
          echo "  Min Confidence:    80% (HIGH QUALITY ONLY)"
          echo "  Data Source:       Deriv WebSocket API (Real-time)"
          echo "  Account Balance:   \$${ACCOUNT_BALANCE:-500}"
          echo "  Risk Per Trade:    ${RISK_PERCENT:-2.0}%"
          echo "  Frequency:         Every hour (on the hour)"
          echo "  Execution Time:    $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "  GitHub Run:        #${{ github.run_number }}"
          echo "  Repository:        ${{ github.repository }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✨ v7.0 Features:"
          echo "  ✅ WebSocket connection for reliable data"
          echo "  ✅ Advanced multi-indicator analysis (9+ indicators)"
          echo "  ✅ EMA, RSI, MACD, Bollinger Bands, Stochastic"
          echo "  ✅ ADX, Supertrend, Volume & Momentum"
          echo "  ✅ 80%+ confidence threshold"
          echo "  ✅ Market hours validation (no weekend Gold trading)"
          echo "  ✅ High-impact news monitoring & alerts"
          echo "  ✅ Risk-based position sizing"
          echo "  ✅ 3-level take profit system (50%/30%/20%)"
          echo "  ✅ Complete trade management plans"
          echo "  ✅ Duplicate signal prevention"
          echo ""
      
      - name: Verify secrets
        run: |
          echo "Checking required secrets..."
          
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            echo "❌ ERROR: TELEGRAM_BOT_TOKEN secret not set!"
            echo "Go to: Settings → Secrets and variables → Actions → New repository secret"
            exit 1
          fi
          if [ -z "${{ secrets.MAIN_CHAT_ID }}" ]; then
            echo "❌ ERROR: MAIN_CHAT_ID secret not set!"
            exit 1
          fi
          if [ -z "${{ secrets.SIMPLE_CHAT_ID }}" ]; then
            echo "❌ ERROR: SIMPLE_CHAT_ID secret not set!"
            exit 1
          fi
          
          echo "✅ All required secrets configured"
          
          # Optional secrets
          if [ -n "${{ secrets.ACCOUNT_BALANCE }}" ]; then
            echo "✅ ACCOUNT_BALANCE configured: \$${{ secrets.ACCOUNT_BALANCE }}"
          else
            echo "ℹ️ ACCOUNT_BALANCE not set, using default: \$500"
          fi
          
          if [ -n "${{ secrets.RISK_PERCENT }}" ]; then
            echo "✅ RISK_PERCENT configured: ${{ secrets.RISK_PERCENT }}%"
          else
            echo "ℹ️ RISK_PERCENT not set, using default: 2.0%"
          fi
          
          if [ -n "${{ secrets.DERIV_APP_ID }}" ]; then
            echo "✅ DERIV_APP_ID configured"
          else
            echo "ℹ️ DERIV_APP_ID not set, using default: 1089"
          fi
      
      - name: Check network connectivity
        run: |
          echo "Testing network connectivity..."
          
          # Test Deriv WebSocket endpoint
          echo "Testing Deriv WebSocket API..."
          if curl -s -o /dev/null -w "%{http_code}" https://ws.derivws.com | grep -q "200\|400\|426"; then
            echo "✅ Deriv WebSocket endpoint reachable"
          else
            echo "⚠️ Deriv WebSocket endpoint unreachable - may affect data quality"
          fi
          
          # Test Deriv HTTP API as fallback
          if curl -s -o /dev/null -w "%{http_code}" https://api.deriv.com | grep -q "200\|301\|302"; then
            echo "✅ Deriv HTTP API reachable"
          else
            echo "⚠️ Deriv HTTP API unreachable"
          fi
          
          # Test Telegram API
          if curl -s -o /dev/null -w "%{http_code}" https://api.telegram.org | grep -q "200\|301\|302"; then
            echo "✅ Telegram API reachable"
          else
            echo "❌ Telegram API unreachable - notifications will fail!"
          fi
          
          # Test Forex Factory (for news)
          if curl -s -o /dev/null -w "%{http_code}" https://nfs.faireconomy.media/ff_calendar_thisweek.json | grep -q "200"; then
            echo "✅ Forex Factory news feed reachable"
          else
            echo "⚠️ Forex Factory unreachable - news monitoring may be limited"
          fi
      
      - name: Test WebSocket connection
        run: |
          echo "Testing WebSocket connection with Python..."
          python3 -c "
import asyncio
import websockets
import json

async def test_connection():
    try:
        uri = 'wss://ws.derivws.com/websockets/v3?app_id=1089'
        async with websockets.connect(uri, ping_interval=30) as websocket:
            # Send ping request
            await websocket.send(json.dumps({'ping': 1}))
            response = await asyncio.wait_for(websocket.recv(), timeout=10)
            data = json.loads(response)
            if 'ping' in data:
                print('✅ WebSocket connection successful!')
                print(f'   Server response: {data}')
                return True
            else:
                print('⚠️ Unexpected response from server')
                return False
    except Exception as e:
        print(f'❌ WebSocket test failed: {e}')
        return False

# Run the test
result = asyncio.run(test_connection())
exit(0 if result else 1)
          " || echo "⚠️ WebSocket test failed but continuing..."

      - name: Run elite trading bot v7.0
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          MAIN_CHAT_ID: ${{ secrets.MAIN_CHAT_ID }}
          SIMPLE_CHAT_ID: ${{ secrets.SIMPLE_CHAT_ID }}
          DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
          ACCOUNT_BALANCE: ${{ secrets.ACCOUNT_BALANCE }}
          RISK_PERCENT: ${{ secrets.RISK_PERCENT }}
          CHECK_NEWS: ${{ github.event.inputs.check_news || 'true' }}
          PYTHONUNBUFFERED: "1"
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🤖 Starting Elite Trading Bot v7.0 (WebSocket Edition)..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Features enabled:"
          echo "  🔌 WebSocket connection: YES"
          echo "  ⏰ Market hours validation: YES"
          echo "  📰 News monitoring: $CHECK_NEWS"
          echo "  🚫 Weekend Gold trading: BLOCKED"
          echo ""
          
          # Find and run the bot file
          BOT_FILE=""
          
          if [ -f "trading_bot_v7.py" ]; then
            BOT_FILE="trading_bot_v7.py"
          elif [ -f "elite_trading_bot_v7.py" ]; then
            BOT_FILE="elite_trading_bot_v7.py"
          elif [ -f "trading_bot.py" ]; then
            BOT_FILE="trading_bot.py"
          elif [ -f "elite_trading_bot.py" ]; then
            BOT_FILE="elite_trading_bot.py"
          elif [ -f "bot.py" ]; then
            BOT_FILE="bot.py"
          fi
          
          if [ -z "$BOT_FILE" ]; then
            echo "❌ ERROR: No bot file found!"
            echo "Expected files: trading_bot_v7.py, elite_trading_bot_v7.py, trading_bot.py, elite_trading_bot.py, or bot.py"
            echo ""
            echo "Available Python files:"
            ls -la *.py 2>/dev/null || echo "No Python files found"
            echo ""
            echo "📝 Please create one of the expected bot files and push to repository"
            exit 1
          fi
          
          echo "✅ Found bot file: $BOT_FILE"
          echo "Starting execution..."
          echo ""
          
          python "$BOT_FILE"
          EXIT_CODE=$?
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Analysis completed successfully"
          else
            echo "❌ Analysis failed with exit code: $EXIT_CODE"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit $EXIT_CODE
        timeout-minutes: 15

      - name: Check log file
        if: always()
        run: |
          if [ -f "elite_trading_bot.log" ]; then
            echo "📄 Log file generated successfully"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Last 80 lines of log:"
            tail -n 80 elite_trading_bot.log
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Check for WebSocket connection status
            if grep -q "WebSocket" elite_trading_bot.log; then
              echo ""
              echo "🔌 WebSocket Connection Status:"
              grep -i "websocket\|ws\|fetching.*candles" elite_trading_bot.log | tail -5
            fi
            
            # Check for signals in log
            if grep -q "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log; then
              echo ""
              echo "✅ HIGH CONFIDENCE SIGNALS DETECTED!"
              echo ""
              grep "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log
              echo ""
              
              # Count signals
              SIGNAL_COUNT=$(grep -c "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log)
              echo "🎯 Total high-confidence signals: $SIGNAL_COUNT"
              
              # Show signal details
              echo ""
              echo "Signal Details:"
              grep -A 3 "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log
            else
              echo ""
              echo "ℹ️ No 80%+ confidence signals this cycle"
              
              # Check reasons
              if grep -q "Market closed" elite_trading_bot.log || grep -q "Weekend" elite_trading_bot.log; then
                echo "📅 Reason: Market closed (weekend or off-hours)"
              elif grep -q "high-impact news" elite_trading_bot.log; then
                echo "📰 Reason: High-impact news event nearby"
              elif grep -q "Below threshold" elite_trading_bot.log; then
                echo "📊 Reason: Confidence below 80% threshold"
              fi
              
              echo "💡 Quality over quantity - waiting for premium setups"
            fi
            
            # Check for market status
            if grep -q "Market Status" elite_trading_bot.log || grep -q "Forex market" elite_trading_bot.log; then
              echo ""
              echo "📊 Market Status Checks:"
              grep -E "Market Status|Forex market|Crypto market|market closed" elite_trading_bot.log | head -5
            fi
            
            # Check for news monitoring
            if grep -q "news" elite_trading_bot.log; then
              echo ""
              echo "📰 News Monitoring:"
              grep -i "news" elite_trading_bot.log | head -5
            fi
            
            # Check for data fetching
            if grep -q "Fetched.*candles" elite_trading_bot.log; then
              echo ""
              echo "📊 Data Fetching Status:"
              grep "Fetched.*candles\|Latest price\|Time range" elite_trading_bot.log | tail -10
            fi
            
            # Check for errors (excluding normal ones)
            ERROR_COUNT=$(grep -i "error" elite_trading_bot.log | grep -v "Error analyzing" | wc -l)
            if [ $ERROR_COUNT -gt 0 ]; then
              echo ""
              echo "⚠️ $ERROR_COUNT error(s) detected in log:"
              grep -i "error" elite_trading_bot.log | grep -v "Error analyzing" | head -5
            fi
          else
            echo "❌ Log file not found!"
          fi
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trading-bot-logs-${{ github.run_number }}
          path: |
            elite_trading_bot.log
            *.log
          retention-days: 30
          if-no-files-found: warn

      - name: Send failure notification
        if: failure()
        run: |
          MESSAGE="🚨 <b>Elite Trading Bot v7.0 Alert</b>%0A%0A"
          MESSAGE="${MESSAGE}❌ Execution failed%0A%0A"
          MESSAGE="${MESSAGE}<b>Details:</b>%0A"
          MESSAGE="${MESSAGE}• GitHub Run: #${{ github.run_number }}%0A"
          MESSAGE="${MESSAGE}• Trigger: ${{ github.event_name }}%0A"
          MESSAGE="${MESSAGE}• Time: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')%0A"
          MESSAGE="${MESSAGE}• Branch: ${{ github.ref_name }}%0A%0A"
          MESSAGE="${MESSAGE}<i>Check GitHub Actions logs for details</i>%0A"
          MESSAGE="${MESSAGE}https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.MAIN_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" || echo "⚠️ Failed to send Telegram notification"
      
      - name: Execution summary
        if: always()
        run: |
          echo ""
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║                    📊 EXECUTION SUMMARY                          ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Bot Version: v7.0 WebSocket Edition"
          echo "Trigger: ${{ github.event_name }}"
          echo "Run #${{ github.run_number }} - Attempt #${{ github.run_attempt }}"
          echo "Status: ${{ job.status }}"
          echo "Completed: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          
          # Day of week check
          DAY_OF_WEEK=$(date +%u)  # 1=Monday, 7=Sunday
          if [ $DAY_OF_WEEK -eq 6 ] || [ $DAY_OF_WEEK -eq 7 ]; then
            echo "📅 Weekend: Gold (XAUUSD) market is CLOSED"
            echo "   Bitcoin (BTCUSD) still active 24/7"
            echo ""
          fi
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Bot executed successfully"
            echo "📊 Check Telegram for any 80%+ signals"
            echo "📄 Logs saved as artifacts (30 days)"
            echo ""
            echo "What was checked:"
            echo "  🔌 WebSocket connection to Deriv API"
            echo "  ⏰ Market hours (Gold weekend blocking)"
            echo "  📰 High-impact news events"
            echo "  📊 Technical indicator confluence"
            echo "  🎯 80%+ confidence threshold"
            echo ""
            echo "Signals sent with:"
            echo "  • Entry prices & position sizes"
            echo "  • Stop loss levels"
            echo "  • 3-level take profit targets"
            echo "  • Risk-reward ratios"
            echo "  • Complete trade management plans"
          else
            echo "❌ Bot execution encountered issues"
            echo "🔍 Review logs in GitHub Actions artifacts"
            echo "📱 Failure notification sent to Telegram"
          fi
          
          echo ""
          echo "🔄 Scheduled Runs:"
          echo "  • Every hour at :00 minutes (UTC)"
          echo "  • Schedule: 0 * * * * (cron)"
          echo "  • Next run: Top of next hour"
          echo ""
          echo "📌 Manual Trigger:"
          echo "  • Go to Actions tab"
          echo "  • Select this workflow"
          echo "  • Click 'Run workflow'"
          echo "  • Toggle options as needed"
          echo ""
          echo "⚠️ Important Notes:"
          echo "  • GitHub may delay scheduled runs by 5-15 minutes"
          echo "  • Workflows disabled after 60 days of no repo activity"
          echo "  • Push commits occasionally to keep active"
          echo "  • First scheduled run may take 1-2 hours to start"
          echo ""