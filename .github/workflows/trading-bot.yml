name: Elite Trading Bot v7.0 - Signal Generator

on:
  schedule:
    # Runs every hour at minute 0
    - cron: '0 * * * *'
  
  # Allows manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: boolean

jobs:
  run-trading-bot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy requests websocket-client python-dateutil pytz
      
      - name: Display bot configuration
        run: |
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║         🚀 Elite Trading Bot v7.0 - SIGNAL GENERATOR            ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Configuration:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Python Version:    $(python --version)"
          echo "  Mode:              Signal Generation Only"
          echo "  Symbols:           XAUUSD (Gold), BTCUSD (Bitcoin)"
          echo "  Strategy:          Multi-Indicator Confluence v7.0"
          echo "  Timeframe:         1 Hour"
          echo "  Min Confidence:    80% (HIGH QUALITY ONLY)"
          echo "  Data Source:       Deriv API (Real-time)"
          echo "  Account Balance:   \$${ACCOUNT_BALANCE:-500}"
          echo "  Risk Per Trade:    ${RISK_PERCENT:-2.0}%"
          echo "  Frequency:         Every hour (on the hour)"
          echo "  Execution Time:    $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "  GitHub Run:        #${{ github.run_number }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✨ v7.0 Features:"
          echo "  ✅ Advanced multi-indicator analysis"
          echo "  ✅ EMA, RSI, MACD, Bollinger Bands"
          echo "  ✅ Stochastic, ADX, Supertrend"
          echo "  ✅ Volume confirmation"
          echo "  ✅ 80%+ confidence threshold"
          echo "  ✅ Risk-based position sizing"
          echo "  ✅ 3-level take profit system"
          echo "  ✅ Complete trade management plans"
          echo "  ✅ Duplicate signal prevention"
          echo "  ✅ R:R ratio calculation"
          echo ""
      
      - name: Verify secrets
        run: |
          echo "Checking required secrets..."
          
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            echo "❌ ERROR: TELEGRAM_BOT_TOKEN secret not set!"
            exit 1
          fi
          if [ -z "${{ secrets.MAIN_CHAT_ID }}" ]; then
            echo "❌ ERROR: MAIN_CHAT_ID secret not set!"
            exit 1
          fi
          if [ -z "${{ secrets.SIMPLE_CHAT_ID }}" ]; then
            echo "❌ ERROR: SIMPLE_CHAT_ID secret not set!"
            exit 1
          fi
          
          echo "✅ All required secrets configured"
          
          # Optional secrets
          if [ -n "${{ secrets.ACCOUNT_BALANCE }}" ]; then
            echo "✅ ACCOUNT_BALANCE configured: \$${{ secrets.ACCOUNT_BALANCE }}"
          else
            echo "ℹ️ ACCOUNT_BALANCE not set, using default: \$500"
          fi
          
          if [ -n "${{ secrets.RISK_PERCENT }}" ]; then
            echo "✅ RISK_PERCENT configured: ${{ secrets.RISK_PERCENT }}%"
          else
            echo "ℹ️ RISK_PERCENT not set, using default: 2.0%"
          fi
          
          if [ -n "${{ secrets.DERIV_APP_ID }}" ]; then
            echo "✅ DERIV_APP_ID configured"
          else
            echo "ℹ️ DERIV_APP_ID not set, using default"
          fi
      
      - name: Check network connectivity
        run: |
          echo "Testing network connectivity..."
          
          # Test Deriv API
          if curl -s -o /dev/null -w "%{http_code}" https://api.deriv.com | grep -q "200\|301\|302"; then
            echo "✅ Deriv API reachable"
          else
            echo "⚠️ Deriv API unreachable - may affect data quality"
          fi
          
          # Test Telegram API
          if curl -s -o /dev/null -w "%{http_code}" https://api.telegram.org | grep -q "200\|301\|302"; then
            echo "✅ Telegram API reachable"
          else
            echo "❌ Telegram API unreachable - notifications will fail!"
          fi
      
      - name: Run elite trading bot v7.0
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          MAIN_CHAT_ID: ${{ secrets.MAIN_CHAT_ID }}
          SIMPLE_CHAT_ID: ${{ secrets.SIMPLE_CHAT_ID }}
          DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
          ACCOUNT_BALANCE: ${{ secrets.ACCOUNT_BALANCE }}
          RISK_PERCENT: ${{ secrets.RISK_PERCENT }}
          PYTHONUNBUFFERED: "1"
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🤖 Starting Elite Trading Bot v7.0..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Run the bot (should be named trading_bot.py or similar)
          python trading_bot.py
          EXIT_CODE=$?
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Analysis completed successfully"
          else
            echo "❌ Analysis failed with exit code: $EXIT_CODE"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit $EXIT_CODE
        timeout-minutes: 15
      
      - name: Check log file
        if: always()
        run: |
          if [ -f "elite_trading_bot.log" ]; then
            echo "📄 Log file generated successfully"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Last 50 lines of log:"
            tail -n 50 elite_trading_bot.log
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Check for signals in log
            if grep -q "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log; then
              echo "✅ HIGH CONFIDENCE SIGNALS DETECTED!"
              echo ""
              grep "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log
              echo ""
              
              # Count signals
              SIGNAL_COUNT=$(grep -c "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log)
              echo "🎯 Total high-confidence signals: $SIGNAL_COUNT"
              
              # Show signal details
              echo ""
              echo "Signal Details:"
              grep -A 3 "HIGH-CONFIDENCE SIGNAL:" elite_trading_bot.log
            else
              echo "ℹ️ No 80%+ confidence signals this cycle"
              echo "💡 Quality over quantity - waiting for premium setups"
            fi
            
            # Check for errors
            if grep -qi "error" elite_trading_bot.log | grep -v "Error analyzing" | head -5; then
              echo ""
              echo "⚠️ Errors detected in log:"
              grep -i "error" elite_trading_bot.log | grep -v "Error analyzing" | head -5
            fi
          else
            echo "❌ Log file not found!"
          fi
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trading-bot-logs-${{ github.run_number }}
          path: |
            elite_trading_bot.log
            *.log
          retention-days: 30
          if-no-files-found: warn
      
      - name: Send failure notification
        if: failure()
        run: |
          MESSAGE="🚨 <b>Elite Trading Bot v7.0 Alert</b>%0A%0A"
          MESSAGE="${MESSAGE}❌ Execution failed%0A%0A"
          MESSAGE="${MESSAGE}<b>Details:</b>%0A"
          MESSAGE="${MESSAGE}• GitHub Run: #${{ github.run_number }}%0A"
          MESSAGE="${MESSAGE}• Time: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')%0A"
          MESSAGE="${MESSAGE}• Branch: ${{ github.ref_name }}%0A%0A"
          MESSAGE="${MESSAGE}<i>Check GitHub Actions logs for details</i>%0A"
          MESSAGE="${MESSAGE}https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.MAIN_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" || echo "⚠️ Failed to send Telegram notification"
      
      - name: Execution summary
        if: always()
        run: |
          echo ""
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║                    📊 EXECUTION SUMMARY                          ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Bot Version: v7.0 GitHub Actions Edition"
          echo "Run #${{ github.run_number }} - Attempt #${{ github.run_attempt }}"
          echo "Status: ${{ job.status }}"
          echo "Completed: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Bot executed successfully"
            echo "📊 Check Telegram for any 80%+ signals"
            echo "📄 Logs saved as artifacts"
            echo ""
            echo "Signals sent with:"
            echo "  • Entry prices & position sizes"
            echo "  • Stop loss levels"
            echo "  • 3-level take profit targets"
            echo "  • Risk-reward ratios"
            echo "  • Complete trade management plans"
          else
            echo "❌ Bot execution encountered issues"
            echo "🔍 Review logs in GitHub Actions artifacts"
            echo "📱 Failure notification sent to Telegram"
          fi
          
          echo ""
          echo "v7.0 Active Features:"
          echo "  ✅ Multi-indicator confluence analysis"
          echo "  ✅ 80%+ confidence threshold"
          echo "  ✅ Risk-based position sizing"
          echo "  ✅ 3-level TP system (50%/30%/20%)"
          echo "  ✅ Breakeven automation strategy"
          echo "  ✅ Volume & momentum confirmation"
          echo ""
          echo "Next scheduled run: Top of next hour"
          echo "Manual trigger: Available in Actions tab"
          echo ""