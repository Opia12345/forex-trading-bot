name: Elite Multi-Asset Trading Bot v8.0 - FIXED

on:
  schedule:
    # Runs every hour at minute 0
    - cron: '0 * * * *'
  
  # Allows manual trigger from Actions tab
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: boolean

jobs:
  run-trading-bot:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy requests websocket-client websockets scipy python-dateutil pytz
      
      - name: Display bot configuration
        run: |
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║         🚀 Elite Multi-Asset Trading Bot v4.0 - FIXED           ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Configuration:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "  Python Version:    $(python --version)"
          echo "  Symbols:           XAUUSD (Gold), BTCUSD (Bitcoin)"
          echo "  Strategies:        6 Advanced Algorithms (Ensemble)"
          echo "  Timeframe:         1 Hour"
          echo "  Min Confidence:    75% (Optimized)"
          echo "  Strategy Votes:    3/6 Required"
          echo "  Stop Loss:         1.5x ATR (Realistic)"
          echo "  Data Source:       Deriv API (Real-time)"
          echo "  Features:          NFP Detection, Market Regime Analysis"
          echo "  Frequency:         Every hour (on the hour)"
          echo "  Execution Time:    $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "  GitHub Run:        #${{ github.run_number }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔧 Critical Fixes Applied:"
          echo "  ✅ Confidence threshold increased (75%)"
          echo "  ✅ Strategy consensus reduced (4/6 → 3/6)"
          echo "  ✅ Stop loss widened (0.8x → 1.5x ATR)"
          echo "  ✅ Individual strategy thresholds optimized"
          echo ""
      
      - name: Verify Telegram secrets
        run: |
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            echo "❌ ERROR: TELEGRAM_BOT_TOKEN secret not set!"
            exit 1
          fi
          if [ -z "${{ secrets.MAIN_CHAT_ID }}" ]; then
            echo "❌ ERROR: MAIN_CHAT_ID secret not set!"
            exit 1
          fi
          if [ -z "${{ secrets.SIMPLE_CHAT_ID }}" ]; then
            echo "❌ ERROR: SIMPLE_CHAT_ID secret not set!"
            exit 1
          fi
          echo "✅ All Telegram secrets configured"
      
      - name: Check network connectivity
        run: |
          echo "Testing network connectivity..."
          curl -s -o /dev/null -w "Deriv API: %{http_code}\n" https://api.deriv.com || echo "⚠️ Deriv API unreachable"
          curl -s -o /dev/null -w "Telegram API: %{http_code}\n" https://api.telegram.org || echo "⚠️ Telegram API unreachable"
      
      - name: Run elite trading bot analysis
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          MAIN_CHAT_ID: ${{ secrets.MAIN_CHAT_ID }}
          SIMPLE_CHAT_ID: ${{ secrets.SIMPLE_CHAT_ID }}
          DERIV_APP_ID: ${{ secrets.DERIV_APP_ID }}
          PYTHONUNBUFFERED: "1"
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🤖 Starting analysis..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          python trading_bot.py
          EXIT_CODE=$?
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Analysis completed successfully"
          else
            echo "❌ Analysis failed with exit code: $EXIT_CODE"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit $EXIT_CODE
        timeout-minutes: 30
      
      - name: Check log file
        if: always()
        run: |
          if [ -f "elite_trading_bot.log" ]; then
            echo "📄 Log file generated successfully"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "Last 30 lines of log:"
            tail -n 30 elite_trading_bot.log
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Check for signals in log
            if grep -q "SIGNAL:" elite_trading_bot.log; then
              echo "✅ Signals detected in this run!"
              grep "SIGNAL:" elite_trading_bot.log
            else
              echo "ℹ️ No signals generated in this cycle"
            fi
            
            # Check for errors
            if grep -qi "error" elite_trading_bot.log; then
              echo "⚠️ Errors detected in log - review required"
            fi
          else
            echo "❌ Log file not found!"
          fi
      
      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trading-bot-logs-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            elite_trading_bot.log
            *.log
          retention-days: 14
          if-no-files-found: warn
      
      - name: Send failure notification to Telegram
        if: failure()
        run: |
          MESSAGE="🚨 <b>Elite Trading Bot Alert</b>%0A%0A"
          MESSAGE="${MESSAGE}❌ Execution failed%0A%0A"
          MESSAGE="${MESSAGE}<b>Details:</b>%0A"
          MESSAGE="${MESSAGE}• GitHub Run: #${{ github.run_number }}%0A"
          MESSAGE="${MESSAGE}• Time: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')%0A"
          MESSAGE="${MESSAGE}• Branch: ${{ github.ref_name }}%0A%0A"
          MESSAGE="${MESSAGE}<i>Check GitHub Actions logs for details</i>%0A"
          MESSAGE="${MESSAGE}https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.MAIN_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=HTML" \
            -d "disable_web_page_preview=true" || echo "⚠️ Failed to send Telegram notification"
      
      - name: Execution summary
        if: always()
        run: |
          echo ""
          echo "╔══════════════════════════════════════════════════════════════════╗"
          echo "║                    📊 EXECUTION SUMMARY                          ║"
          echo "╚══════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "Run #${{ github.run_number }} - Attempt #${{ github.run_attempt }}"
          echo "Status: ${{ job.status }}"
          echo "Completed: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S %Z')"
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Bot executed successfully"
            echo "📊 Check Telegram for signals"
            echo "📄 Logs uploaded as artifact"
          else
            echo "❌ Bot execution had issues"
            echo "🔍 Review logs in GitHub Actions artifacts"
            echo "📱 Failure notification sent to Telegram"
          fi
          echo ""
          echo "Next scheduled run: Top of next hour"
          echo "Manual trigger: Available in Actions tab"
          echo ""